import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:primos_app/pages/waiter/waiter_menu_cart.dart';
import 'package:primos_app/widgets/bottomBar.dart';
import 'package:primos_app/widgets/filterBtns.dart';
import 'package:primos_app/widgets/pageObject.dart';
import 'package:primos_app/widgets/searchBar.dart';
import 'package:primos_app/widgets/sideMenu.dart';
import 'package:primos_app/widgets/styledButton.dart';

import '../../providers/image/imageUrl_provider.dart';
import '../../widgets/itemCard.dart';
import '../../widgets/styledDropdown.dart';

import 'package:primos_app/widgets/orderObject.dart';

import 'package:flutter_riverpod/flutter_riverpod.dart';

class WaiterMenu extends StatefulWidget {
  const WaiterMenu({super.key});

  @override
  State<WaiterMenu> createState() => _WaiterMenuState();
}

class _WaiterMenuState extends State<WaiterMenu> {
  // firebase
  final CollectionReference itemsCollection =
      FirebaseFirestore.instance.collection('menu');

  int quantity = 0;

  String? variation;

  List<OrderObject> currentOrders = [];

  double subtotal = 0;

  double calculateSubtotal(List<OrderObject> orders) {
    return orders.fold(0, (double sum, OrderObject order) {
      return sum + (order.price * order.quantity);
    });
  }

  void updateSubtotal() {
    double newSubtotal = calculateSubtotal(currentOrders);
    setState(() {
      subtotal = newSubtotal;
    });
  }

  void removeOrder(int index) {
    setState(() {
      currentOrders.removeAt(index);
    });
    updateSubtotal();
    print(currentOrders);
  }

  Future<void> addModal(
      productId, productName, productPrice, productVariation) async {
    setState(() {
      quantity = 0; // Reset quantity to 0 when opening the modal
      variation = null;
    });
    int localQuantity = quantity; // Create a local copy of quantity

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          contentPadding: EdgeInsets.zero,
          content: StatefulBuilder(
            builder: (context, setState) {
              return Column(mainAxisSize: MainAxisSize.min, children: [
                Container(
                  padding: EdgeInsets.all(16.0),
                  child: Text(
                    productName,
                    textAlign: TextAlign.left,
                  ),
                ),
                Divider(height: 0),
                Container(
                    padding: EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        productVariation != null
                            ? Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  const Expanded(
                                    flex: 1,
                                    child: Text("Variation: "),
                                  ),
                                  Expanded(
                                    flex: 2,
                                    child: StyledDropdown(
                                      width: double.infinity,
                                      dropdownColor: Color(0xFFf8f8f7),
                                      value: variation,
                                      onChange: (String? newValue) {
                                        setState(() {
                                          variation = newValue;
                                        });
                                      },
                                      hintText: "Select Variation",
                                      items: const [
                                        'Medium',
                                        'Large',
                                      ],
                                    ),
                                  ),
                                ],
                              )
                            : SizedBox(),
                        const SizedBox(
                          height: 10,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text("Quantity: "),
                            Container(
                              decoration: const BoxDecoration(
                                color: Color(0xFFf8f8f7),
                                borderRadius: BorderRadius.all(
                                  Radius.circular(50),
                                ),
                              ),
                              height: 40,
                              width: 150,
                              child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    IconButton(
                                      onPressed: () {
                                        setState(() {
                                          if (quantity != 1) {
                                            quantity--;
                                          }
                                        });
                                      },
                                      icon: const Icon(Icons.remove_circle),
                                      iconSize: 25,
                                    ),
                                    Text(
                                      quantity.toString(),
                                      style: const TextStyle(
                                          letterSpacing: 1,
                                          fontWeight: FontWeight.w500,
                                          fontSize: 16),
                                    ),
                                    IconButton(
                                      onPressed: () {
                                        setState(() {
                                          quantity++;
                                        });
                                      },
                                      icon: const Icon(Icons.add_circle),
                                      iconSize: 25,
                                    )
                                  ]),
                            ),
                          ],
                        ),
                        const SizedBox(
                          height: 15,
                        ),
                        Row(
                          children: [
                            StyledButton(
                                btnText: "Cancel",
                                onClick: () {
                                  Navigator.of(context).pop();
                                }),
                            const SizedBox(
                              width: 10,
                            ),
                            Expanded(
                              flex: 1,
                              child: StyledButton(
                                  btnText: "Confirm",
                                  onClick: () {
                                    // Check if an order with the same details already exists in currentOrders
                                    int existingIndex =
                                        currentOrders.indexWhere(
                                      (order) =>
                                          order.name == productName &&
                                          order.variation == variation &&
                                          order.price == productPrice,
                                    );

                                    if (existingIndex != -1) {
                                      // If an existing order is found, update its quantity
                                      setState(() {
                                        currentOrders[existingIndex].quantity +=
                                            quantity;
                                      });
                                    } else {
                                      // If no existing order found, create a new order and add to currentOrders
                                      final currentOrder = OrderObject(
                                        id: productId,
                                        name: productName,
                                        price: productPrice,
                                        variation: variation,
                                        quantity: quantity,
                                      );

                                      // currentOrders?.add(currentOrder);

                                      setState(() {
                                        currentOrders.add(currentOrder);
                                      });

                                      print(currentOrders);
                                    }
                                    updateSubtotal();

                                    Navigator.of(context)
                                        .pop(); //close the modal
                                  }),
                            ),
                          ],
                        ),
                      ],
                    ))
              ]);
            },
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    // subtotal = currentOrders.fold(0, (double sum, OrderObject order) {
    //   return sum + (order.price * order.quantity);
    // });

    return Scaffold(
      backgroundColor: Color(0xfff8f8f7),
      appBar: AppBar(
        title: Text("MENU"),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              CustomSearchBar(),
              FilterBtns(),
              StreamBuilder<QuerySnapshot>(
                stream: itemsCollection.snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Text('Error: ${snapshot.error}');
                  }

                  if (!snapshot.hasData) {
                    return CircularProgressIndicator();
                  }

                  final itemDocs = snapshot.data!.docs;

                  return Padding(
                    padding: EdgeInsets.all(16),
                    child: Wrap(
                      spacing: 10,
                      runSpacing: 10,
                      children: itemDocs.map((itemDoc) {
                        final productId =
                            itemDoc.id; // Get the document ID as the productId
                        final productName = itemDoc['itemName'] as String;
                        final itemPrice = itemDoc['itemPrice'];
                        final double productPrice = (itemPrice is double)
                            ? itemPrice
                            : (itemPrice is int)
                                ? itemPrice.toDouble()
                                : 0.0;

                        final dynamic productVariation =
                            null; //todo GRAB THE PRODUCT VARIATION FROM DB, ex. MEDIUM, LARGE, CHICKEN, BEEF

                        return ItemCard(
                          key: ValueKey(productId),
                          productId: productId, // Pass the productId
                          productName: productName,
                          productPrice: productPrice,
                          // cardHeight: 300,
                          footerSection: Column(
                            children: [
                              StyledButton(
                                  btnIcon: Icon(Icons.add),
                                  noShadow: true,
                                  btnWidth: double.infinity,
                                  btnHeight: 35,
                                  btnText: "Add",
                                  onClick: () {
                                    addModal(productId, productName,
                                        productPrice, productVariation);
                                  })
                            ],
                          ),
                        );
                      }).toList(),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ),
      bottomNavigationBar: BottomBar(
        height: 100,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Row(
            children: [
              Expanded(
                flex: 1,
                child: StyledButton(
                  btnIcon: Icon(Icons.shopping_cart_checkout),
                  noShadow: true,
                  btnText: "View Orders",
                  secondText: "PHP $subtotal",
                  onClick: () {
                    Navigator.of(context).push(
                      MaterialPageRoute(builder: (BuildContext context) {
                        return WaiterMenuCart(
                          orderData: currentOrders,
                          onDelete: removeOrder,
                        );
                      }),
                    );
                  },
                  btnColor: const Color(0xfff8f8f7),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
